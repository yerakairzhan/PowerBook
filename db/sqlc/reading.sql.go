// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reading.sql

package db

import (
	"context"
	"time"
)

const createReadingLog = `-- name: CreateReadingLog :one
INSERT INTO reading_logs (userid, date, minutes_read)
VALUES ($1, $2, $3)
        RETURNING id, userid, date, minutes_read, created_at
`

type CreateReadingLogParams struct {
	Userid      string    `json:"userid"`
	Date        time.Time `json:"date"`
	MinutesRead int32     `json:"minutes_read"`
}

func (q *Queries) CreateReadingLog(ctx context.Context, arg CreateReadingLogParams) (ReadingLog, error) {
	row := q.db.QueryRowContext(ctx, createReadingLog, arg.Userid, arg.Date, arg.MinutesRead)
	var i ReadingLog
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Date,
		&i.MinutesRead,
		&i.CreatedAt,
	)
	return i, err
}

const getReadingLogsByUser = `-- name: GetReadingLogsByUser :many
SELECT date, minutes_read
FROM reading_logs
WHERE userid = $1
ORDER BY date DESC
`

type GetReadingLogsByUserRow struct {
	Date        time.Time `json:"date"`
	MinutesRead int32     `json:"minutes_read"`
}

func (q *Queries) GetReadingLogsByUser(ctx context.Context, userid string) ([]GetReadingLogsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getReadingLogsByUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReadingLogsByUserRow
	for rows.Next() {
		var i GetReadingLogsByUserRow
		if err := rows.Scan(&i.Date, &i.MinutesRead); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopReaders = `-- name: GetTopReaders :many
SELECT u.username, SUM(rl.minutes_read) AS total_minutes
FROM users u
         JOIN reading_logs rl ON u.userid = rl.userid
GROUP BY u.username
ORDER BY total_minutes DESC
    LIMIT 3
`

type GetTopReadersRow struct {
	Username     string `json:"username"`
	TotalMinutes int64  `json:"total_minutes"`
}

func (q *Queries) GetTopReaders(ctx context.Context) ([]GetTopReadersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopReaders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopReadersRow
	for rows.Next() {
		var i GetTopReadersRow
		if err := rows.Scan(&i.Username, &i.TotalMinutes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReadingLog = `-- name: UpdateReadingLog :one
update reading_logs set minutes_read = $3 where (userid = $1 and date = $2)
    returning id, userid, date, minutes_read, created_at
`

type UpdateReadingLogParams struct {
	Userid      string    `json:"userid"`
	Date        time.Time `json:"date"`
	MinutesRead int32     `json:"minutes_read"`
}

func (q *Queries) UpdateReadingLog(ctx context.Context, arg UpdateReadingLogParams) (ReadingLog, error) {
	row := q.db.QueryRowContext(ctx, updateReadingLog, arg.Userid, arg.Date, arg.MinutesRead)
	var i ReadingLog
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Date,
		&i.MinutesRead,
		&i.CreatedAt,
	)
	return i, err
}
