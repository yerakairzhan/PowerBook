// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (userid, username)
VALUES ($1, $2)
    RETURNING id, userid, username, registered, created_at
`

type CreateUserParams struct {
	Userid   string `json:"userid"`
	Username string `json:"username"`
}

type CreateUserRow struct {
	ID         int32        `json:"id"`
	Userid     string       `json:"userid"`
	Username   string       `json:"username"`
	Registered sql.NullBool `json:"registered"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Userid, arg.Username)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Username,
		&i.Registered,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserState = `-- name: DeleteUserState :exec
update users set state = null where userid = $1
`

func (q *Queries) DeleteUserState(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, deleteUserState, userid)
	return err
}

const getLanguage = `-- name: GetLanguage :one
select language from users where userid = $1
`

func (q *Queries) GetLanguage(ctx context.Context, userid string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getLanguage, userid)
	var language sql.NullString
	err := row.Scan(&language)
	return language, err
}

const getRegistered = `-- name: GetRegistered :one
select registered from users where userid = $1
`

func (q *Queries) GetRegistered(ctx context.Context, userid string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, getRegistered, userid)
	var registered sql.NullBool
	err := row.Scan(&registered)
	return registered, err
}

const getTimer = `-- name: GetTimer :one
select timer from users where userid = $1
`

func (q *Queries) GetTimer(ctx context.Context, userid string) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, getTimer, userid)
	var timer time.Time
	err := row.Scan(&timer)
	return timer, err
}

const getUser = `-- name: GetUser :one
SELECT userid, username FROM users WHERE userid = $1
`

type GetUserRow struct {
	Userid   string `json:"userid"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, userid string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i GetUserRow
	err := row.Scan(&i.Userid, &i.Username)
	return i, err
}

const getUserState = `-- name: GetUserState :one
SELECT state FROM users WHERE userid = $1
`

func (q *Queries) GetUserState(ctx context.Context, userid string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserState, userid)
	var state sql.NullString
	err := row.Scan(&state)
	return state, err
}

const setLanguage = `-- name: SetLanguage :exec
update users set language = $2 where userid = $1
`

type SetLanguageParams struct {
	Userid   string         `json:"userid"`
	Language sql.NullString `json:"language"`
}

func (q *Queries) SetLanguage(ctx context.Context, arg SetLanguageParams) error {
	_, err := q.db.ExecContext(ctx, setLanguage, arg.Userid, arg.Language)
	return err
}

const setRegistered = `-- name: SetRegistered :exec
update users set registered = true where userid = $1
`

func (q *Queries) SetRegistered(ctx context.Context, userid string) error {
	_, err := q.db.ExecContext(ctx, setRegistered, userid)
	return err
}

const setTimer = `-- name: SetTimer :exec
update users set timer = $2 where userid = $1
`

type SetTimerParams struct {
	Userid string    `json:"userid"`
	Timer  time.Time `json:"timer"`
}

func (q *Queries) SetTimer(ctx context.Context, arg SetTimerParams) error {
	_, err := q.db.ExecContext(ctx, setTimer, arg.Userid, arg.Timer)
	return err
}

const setUserState = `-- name: SetUserState :exec
update users set state = $2 where userid = $1
`

type SetUserStateParams struct {
	Userid string         `json:"userid"`
	State  sql.NullString `json:"state"`
}

func (q *Queries) SetUserState(ctx context.Context, arg SetUserStateParams) error {
	_, err := q.db.ExecContext(ctx, setUserState, arg.Userid, arg.State)
	return err
}
