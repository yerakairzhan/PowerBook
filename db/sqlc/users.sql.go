// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (userid, username)
VALUES ($1, $2)
    RETURNING id, userid, username, registered, created_at
`

type CreateUserParams struct {
	Userid   string `json:"userid"`
	Username string `json:"username"`
}

type CreateUserRow struct {
	ID         int32        `json:"id"`
	Userid     string       `json:"userid"`
	Username   string       `json:"username"`
	Registered sql.NullBool `json:"registered"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Userid, arg.Username)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Username,
		&i.Registered,
		&i.CreatedAt,
	)
	return i, err
}

const getLanguage = `-- name: GetLanguage :one
select language from users where userid = $1
`

func (q *Queries) GetLanguage(ctx context.Context, userid string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getLanguage, userid)
	var language sql.NullString
	err := row.Scan(&language)
	return language, err
}

const getUser = `-- name: GetUser :one
SELECT userid, username FROM users WHERE userid = $1
`

type GetUserRow struct {
	Userid   string `json:"userid"`
	Username string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, userid string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i GetUserRow
	err := row.Scan(&i.Userid, &i.Username)
	return i, err
}
